// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;

namespace madlib
{
	public interface IRenderable
	{
		string Value();
		bool IsQTE ();
	}

	public class Entry : IRenderable {
		private string _value;
		private EntryStore _store;
		public string Type{ get; set; }

		public Entry(string type)
		{
			Type = type;
		}

		public EntryStore Store
		{
			get
			{
				if (_store == null)
				{
					_store = EntryStore.Instance;
				}
				return _store;
			}

			set
			{
				_store = value;
			}
		}


		public string Value()
		{
			if (_value == null) {
				_value = Store.GetRand(Type);
			}
			return _value;
		}

		public bool IsQTE()
		{
			return false;
		}
	}

	public class Text : IRenderable {
		public string Content;
		public string Value()
		{
			return Content;
		}

		public Text(string content)
		{
			Content = content;
		}

		public bool IsQTE()
		{
			return false;
		}
	}

	public class QuickTimeEvent : IRenderable {
		private static string QTE_HEADER = "qte,";
		public string Content;
		public QuickTimeEvent(string content)
		{
			Content = content.Substring(QTE_HEADER.Length);
		}

		public string Value()
		{
			return "%" + Content;
		}

		public bool IsQTE()
		{
			return true;
		}

		public static bool IsQTE(string item)
		{
			return item.StartsWith(QTE_HEADER);
		}


	}

	public class EntryStore
	{
		private static EntryStore singleton;

		public static EntryStore Instance
		{
			get
			{
				if (singleton == null) {
					singleton = new EntryStore ();
				}
				return singleton;
			}
		}


		private Hashtable lookup = new Hashtable ();

		public void Clear()
		{
			lookup.Clear ();
		}

		public IList AllFor(string type)
		{
			return (IList)lookup[type];
		}

		public void Add(string type, string value)
		{
			IList entries = (IList)lookup [type];
			if (entries == null)
			{
				entries = new ArrayList();
				lookup[type] = entries;
			}
			entries.Add (value);
		}

		public void AddMultiple(string type, string[] values)
		{
			foreach (string value in values) {
				Add (type, value);
			}
		}

		public bool IsEntry(string type)
		{
			return lookup.ContainsKey (type);
		}

		public string GetRand(string type)
		{
			IList values = AllFor (type);
			Random rand = new Random ();
			int index = rand.Next (0, values.Count);
			return (string)values [index];
		}
	}

	public class Template
	{
		private static char TRIGGER = '%';
		public float BufferSize = 0.300f;
		private bool _perfectTimingPosition = false;
		private int _position;
		
		public ArrayList Renderers { get; set; }

		private int _length;
		public int Length {
			get {
				return _fullText.Length;
			}
		}

		private string _fullText;
		public string RenderFull() {
			string renderedText = "";
			foreach (IRenderable renderable in Renderers)
			{
				renderedText += renderable.Value ();
			}
			return renderedText;
		}

		private string _text;
		public string Text {
			get { return _text; }
		}

		public bool InQTE()
		{
			return false;
		}

		public bool IsPerfect()
		{
			return _perfectTimingPosition;
		}

		public bool IsClose()
		{
			bool late = !IsPerfect() && InQTE();
			return late;
		}

		public Template()
		{
			Renderers = new ArrayList ();
			Reset ();
		}

		public void Reset()
		{
			_text = "";
			_position = 0;
			_perfectTimingPosition = false;
		}

		public void IncrPosition()
		{
			_position++;
			if (_position < _fullText.Length) {
				char item = _fullText[_position];
				if (item != TRIGGER) {
					_text += item;
				} else {
					_perfectTimingPosition = true;
					_position++;
				}
			}
		}

		public void Add(IRenderable renderer)
		{
			Renderers.Add (renderer);
			Reset ();
		}

		public void Ready() {
			_fullText = RenderFull();
		}
	}

	public class Madlib
	{
		public static Template Parse(string templateString)
		{
			EntryStore s = EntryStore.Instance;
			Template t = new Template ();
			string[] extracted = templateString.Split (new char[]{'|'});
			foreach(string item in extracted)
			{
				if(item.Length < 0)
				{
					continue;
				}
				if(s.IsEntry(item))
				{
					t.Add (new Entry(item));
				}
				else if (QuickTimeEvent.IsQTE(item))
				{
					t.Add (new QuickTimeEvent(item));
				}
				else
				{
					t.Add (new Text(item));
				}
			}

			return t;
		}
	}
}

